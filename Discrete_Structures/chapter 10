from ortools.constraint_solver import routing_enums_pb2
from ortools.constraint_solver import pywrapcp

# Define the distance callback function for computing the straight-line distance
def distance_callback(from_index, to_index):
    from_lat, from_lng = locations[from_index]
    to_lat, to_lng = locations[to_index]
    lat_diff = (to_lat - from_lat) * (math.pi / 180.0)
    lng_diff = (to_lng - from_lng) * (math.pi / 180.0)
    a = math.sin(lat_diff / 2) ** 2 + math.cos(from_lat * (math.pi / 180.0)) * math.cos(to_lat * (math.pi / 180.0)) * math.sin(lng_diff / 2) ** 2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
    return int(c * 6371000)

# Define the main function that solves the problem
def solve_tsp():
    # Define the locations of the 50 state capitals in latitude and longitude
    locations = {
        0: (32.361538, -86.279118), # Montgomery, Alabama
        1: (58.301935, -134.419740), # Juneau, Alaska
        2: (33.448457, -112.073844), # Phoenix, Arizona
        # ... and so on for the other 47 states
    }

    # Create the routing model and set the search parameters
    routing = pywrapcp.RoutingModel(len(locations), 1, 0)
    search_parameters = pywrapcp.RoutingModel.DefaultSearchParameters()

    # Set the distance callback for computing the straight-line distance
    routing.SetArcCostEvaluatorOfAllVehicles(distance_callback)

    # Set the constraint that each city can only be visited once
    routing.AddDimension(
        routing.GetDimensionOrDie("Transit"),
        50, # number of cities
        50, # capacity of each vehicle
        True, # start cumul to zero
        "Visits")

    visit_callback_index = routing.RegisterUnaryTransitCallback(
        lambda index, unused: 1)

    routing.AddToVisitCallbackDimension(
        routing.GetDimensionOrDie("Visits"),
        visit_callback_index)

    # Set the start and end locations (the starting city is also the ending city)
    start_index = 0
    end_index = 0

    # Solve the problem
    solution = routing.SolveWithParameters(search_parameters)

    # Extract the solution
    index = routing.Start(0)
    plan_output = 'Route for TSP problem:\n'
    route_distance = 0
    while not routing.IsEnd(index):
        plan_output += ' {} ->'.format(routing.IndexToNode(index))
        previous_index = index
        index = solution.Value(routing.NextVar(index))
        route_distance += routing.GetArcCostForVehicle(previous_index, index, 0)
    plan_output += ' {}\n'.format(routing.IndexToNode(index))
    route_distance += routing.GetArcCostForVehicle(previous_index, index, 0)
    plan_output += 'Total distance: {} meters\n'.format(route_distance)

    return plan_output

# Call the main function to solve the
